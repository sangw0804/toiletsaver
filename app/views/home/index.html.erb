<h1 style="font-family: 'Nanum Myeongjo', serif; margin:40px 0 20px 0;">화장실구조대</h1>


<input id="pac-input" class="controls" type="text" placeholder="Search Box">
<div id="map" style="border-radius:10px;"></div>

<div id="textfield" style="font-family: 'Nanum Myeongjo', serif; margin-top:10px">

</div>


 <script>
      // This example adds a search box to a map, using the Google Place Autocomplete
      // feature. People can enter geographical searches. The search box will return a
      // pick list containing a mix of places and predicted search terms.

      // This example requires the Places library. Include the libraries=places
      // parameter when you first load the API. For example:
      // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">

      function initAutocomplete() {
        var map = new google.maps.Map(document.getElementById('map'), {
          center: {lat: 37.549013, lng: 126.836270},
          zoom: 17,
          mapTypeId: 'roadmap'
        });

        // Create the search box and link it to the UI element.
        var input = document.getElementById('pac-input');
        var searchBox = new google.maps.places.SearchBox(input);
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
        var markers = [];

        // Bias the SearchBox results towards current map's viewport.
        map.addListener('bounds_changed', function() {
          searchBox.setBounds(map.getBounds());

          markers.forEach(function(marker) {
            if(marker.getTitle() != "mypoint") {
              marker.setMap(null);
            }
          });
          //markers = [];

          toiletBound = map.getBounds();
          var toiletImage = {
            url: "<%= asset_path 'toiletImage.png' %>",
            // This marker is 20 pixels wide by 32 pixels high
          };

          <% @rows.each do |row| %>
            if(toiletBound.contains({lat: <%= row["Y_WGS84"] %>, lng: <%= row["X_WGS84"] %>})) {

                var marker = new google.maps.Marker({
                    map: map,
                    icon: toiletImage,
                    position: {lat: <%= row["Y_WGS84"] %>, lng: <%= row["X_WGS84"] %>}
                })
                marker.addListener('click', function() {
                    var fname = "<%= row["FNAME"] %>";
                    if(fname.match("화장실") != "화장실") {
                        fname += "화장실";
                    }
                    $('#textfield').text(fname);
                });
               
                markers.push(marker);
            }
          <% end%>
        });

        // Listen for the event fired when the user selects a prediction and retrieve
        // more details for that place.
        searchBox.addListener('places_changed', function() {
          var places = searchBox.getPlaces();

          if (places.length == 0) {
            return;
          }

          //받아온 places 들 중 첫번째의 위도 경도를 기준으로
          
          // Clear out the old markers.
          markers.forEach(function(marker) {
            marker.setMap(null);
          });
          markers = [];

          // For each place, get the icon, name and location.
          var bounds = new google.maps.LatLngBounds();
          places.forEach(function(place) {
            if (!place.geometry) {
              console.log("Returned place contains no geometry");
              return;
            }
            var icon = {
              url: place.icon,
              size: new google.maps.Size(71, 71),
              origin: new google.maps.Point(0, 0),
              anchor: new google.maps.Point(17, 34),
              scaledSize: new google.maps.Size(25, 25)
            };

            // Create a marker for each place.
            markers.push(new google.maps.Marker({
              map: map,
            //   icon: icon,
              title: "mypoint",
              position: place.geometry.location
            }));

            if (place.geometry.viewport) {
              // Only geocodes have viewport.
              bounds.union(place.geometry.viewport);
            } else {
              bounds.extend(place.geometry.location);
            }
          });
          map.fitBounds(bounds);
        });
      }

    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=<%=ENV["google_api_key"]%>&libraries=places&callback=initAutocomplete"
         async defer></script>
